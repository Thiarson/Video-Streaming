generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_DATABASE_URL")
}

model UserInfo {
  userId               String          @id @unique @db.VarChar()
  userPseudo           String          @db.VarChar()
  userBirthDate        DateTime        @db.Date
  userSex              String          @db.Char()
  userPhone            String          @unique @db.VarChar()
  userEmail            String          @unique @db.VarChar()
  userBio              String?         @db.VarChar()
  userWallet           String          @default("0") @db.VarChar()
  userPassword         String          @db.VarChar()
  userRegistrationDate DateTime        @default(now())
  userPhoto            String          @default("/data/default/profil/photo.jpg") @db.VarChar()
  video                VideoContent[]
  direct               DirectContent[]
  videoPlaylist        VideoPlaylist[]
  buyVideo             BuyVideo[]
  assistDirect         AssistDirect[]
}

model VideoContent {
  videoId              String       @id @unique @db.VarChar()
  user                 UserInfo     @relation(fields: [userId], references: [userId])
  userId               String       @db.VarChar()
  videoTitle           String       @db.VarChar()
  videoDescription     String
  videoCategory        String       @db.VarChar()
  videoPrice           String       @db.VarChar()
  videoThumbnail       String       @db.VarChar()
  videoUrl             String       @unique @db.VarChar()
  videoPublicationDate DateTime     @default(now())
  videoDuration        String       @db.VarChar()
  videoPlaylist        String?      @db.VarChar()
  isValid              Boolean?
  videoCheck           VideoCheck[]
  buyVideo             BuyVideo[]
}

model DirectContent {
  directId          String               @id @unique @db.VarChar()
  user              UserInfo             @relation(fields: [userId], references: [userId])
  userId            String               @db.VarChar()
  directTitle       String               @db.VarChar()
  directDescription String
  directThumbnail   String               @db.VarChar()
  directUrl         String               @unique @db.VarChar()
  directDate        DateTime
  directDuration    String               @db.VarChar()
  directPrice       String               @db.VarChar()
  directInProgress  Boolean?
  directKey         String?              @unique @db.VarChar()
  isValid           Boolean?
  directCheck       DirectCheck[]
  assistDirect      AssistDirect[]
  rediffusion       RediffusionContent[]
}

model RediffusionContent {
  direct         DirectContent @relation(fields: [rediffusionId], references: [directId])
  rediffusionId  String        @id @unique @db.VarChar()
  rediffusionUrl String        @unique @db.VarChar()
}

model VideoPlaylist {
  playlistId          String   @id @unique @db.VarChar()
  user                UserInfo @relation(fields: [userId], references: [userId])
  userId              String   @db.VarChar()
  playlistTitle       String   @db.VarChar()
  playlistDescription String
  videoCount          Int      @default(0)
}

model VideoCheck {
  video     VideoContent @relation(fields: [videoId], references: [videoId])
  videoId   String       @id @unique @db.VarChar()
  isChecked Boolean      @default(false)
}

model DirectCheck {
  direct    DirectContent @relation(fields: [directId], references: [directId])
  directId  String        @id @unique @db.VarChar()
  isChecked Boolean       @default(false)
}

model BuyVideo {
  buyVideoId   Int          @id @unique @default(autoincrement())
  video        VideoContent @relation(fields: [videoId], references: [videoId])
  user         UserInfo     @relation(fields: [userId], references: [userId])
  videoId      String       @db.VarChar()
  userId       String       @db.VarChar()
  purchaseDate DateTime     @default(now())
}

model AssistDirect {
  assistDirectId Int           @id @unique @default(autoincrement())
  direct         DirectContent @relation(fields: [directId], references: [directId])
  user           UserInfo      @relation(fields: [userId], references: [userId])
  directId       String        @db.VarChar()
  userId         String        @db.VarChar()
  purchaseDate   DateTime      @default(now())
}
